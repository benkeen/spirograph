{"version":3,"sources":["../../src/js/store.jsx"],"names":["Store","window","resize","updateWindowDimensions","windowHeight","height","windowWidth","width","params","panels","push","Panel","panel","splice","indexOf","store","id","v4","each","Object","keys","key","r","g","b"],"mappings":";;;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAGMA,K;AAKF,qBAAc;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACV,8BAAEC,MAAF,EAAUC,MAAV,CAAiB,YAAM;AACnB,kBAAKC,sBAAL;AACH,SAFD;AAGH;;;;iDAEyB;AACtB,iBAAKC,YAAL,GAAoB,sBAAEH,MAAF,EAAUI,MAAV,EAApB;AACA,iBAAKC,WAAL,GAAmB,sBAAEL,MAAF,EAAUM,KAAV,EAAnB;AACH;;;iCAESC,M,EAAQ;AACd,iBAAKC,MAAL,CAAYC,IAAZ,CAAiB,IAAIC,KAAJ,CAAU,IAAV,EAAgBH,MAAhB,CAAjB;AACH;;;oCAEoBI,K,EAAO;AACxB,iBAAKH,MAAL,CAAYI,MAAZ,CAAmB,KAAKJ,MAAL,CAAYK,OAAZ,CAAoBF,KAApB,CAAnB,EAA+C,CAA/C;AACH;;;;;;;eArBoB,E;;;;;;;;;IAyBnBD,K,cAoBF,eAAYI,KAAZ,EAAmBP,MAAnB,EAA2C;AAAA;;AAAA,QAAhBQ,EAAgB,uEAAX,mBAAKC,EAAL,EAAW;;AAAA;;AAAA,SAnB3CD,EAmB2C,GAnBtC,IAmBsC;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AAAA;;AACvC,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKC,EAAL,GAAUA,EAAV;;AAEA,qBAAEE,IAAF,CAAOC,OAAOC,IAAP,CAAYZ,MAAZ,CAAP,EAA4B,UAACa,GAAD,EAAS;AACjC,eAAKA,GAAL,IAAYb,OAAOa,GAAP,CAAZ;AACH,KAFD;AAGH,C,CA1BU;;;;;eAEW,E;;;;;eAEkB,E;;;;;eACA,E;;;;;eACpB,G;;;;;eACQ,C;;;;;eACG,G;;;;;eACJ,S;;;;;eACH;AACpBC,eAAG,EADiB;AAEpBC,eAAG,GAFiB;AAGpBC,eAAG;AAHiB,S;;;;;eAKU,I;;;;;eACA,I;;;;;eACI,I;;;;AAa1C;;kBACe,IAAIxB,KAAJ,E","file":"store.js","sourcesContent":["import { observable, action } from 'mobx';\nimport uuid from 'node-uuid';\nimport $ from 'jquery';\nimport _ from 'lodash';\n\n\nclass Store {\n    @observable panels = [];\n    @observable windowHeight;\n    @observable windowWidth;\n\n    constructor() {\n        $(window).resize(() => {\n            this.updateWindowDimensions();\n        });\n    }\n\n    updateWindowDimensions () {\n        this.windowHeight = $(window).height();\n        this.windowWidth = $(window).width();\n    }\n\n    addPanel (params) {\n        this.panels.push(new Panel(this, params));\n    }\n\n    @action removePanel (panel) {\n        this.panels.splice(this.panels.indexOf(panel), 1);\n    }\n}\n\n\nclass Panel {\n    id = null; // immutable\n\n    @observable currTab = '';\n\n    @observable innerCircleSizePercentage = 50;\n    @observable pointFromCenterPercentage = 50;\n    @observable speed = 150;\n    @observable lineThickness = 1;\n    @observable lineTransparency = 0.5;\n    @observable lineColorHex = '#0044cc';\n    @observable lineColor = {\n        r: 50,\n        g: 150,\n        b: 255\n    };\n    @observable outerRadiusInPixels = null;\n    @observable innerRadiusInPixels = null;\n    @observable pointFromCenterInPixels = null;\n\n    constructor(store, params, id = uuid.v4()) {\n        this.store = store;\n        this.id = id;\n\n        _.each(Object.keys(params), (key) => {\n            this[key] = params[key];\n        });\n    }\n}\n\n\n// return a singleton store\nexport default new Store();\n"]}